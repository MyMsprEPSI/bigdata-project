# transform.py

import logging
from pyspark.sql.functions import (
    col,
    when,
    lit,
    sum as spark_sum,
    round,
    regexp_replace,
    regexp_extract,
    expr,
    trim,
)
from pyspark.sql.types import IntegerType, DoubleType, DateType
from pyspark.sql.window import Window
from pyspark.sql import functions as F, types as T
from pyspark.ml.regression import LinearRegression
from pyspark.ml.feature import VectorAssembler




# Configuration du logger
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class DataTransformer:
    """
    Classe permettant de transformer les donn√©es extraites avant leur chargement.
    """

    def __init__(self):
        logger.info("üöÄ Initialisation du DataTransformer")
        pass

    def transform_environmental_data(self, df_env):
        """
        Transforme les donn√©es environnementales :
        - S√©lectionne uniquement les colonnes n√©cessaires
        - Remplace les valeurs vides par 0.0 pour les valeurs manquantes d'√©olien et solaire
        - Ajoute les donn√©es de l'ann√©e 2000 pour chaque r√©gion avec des valeurs √† 0.0
        - Regroupe les donn√©es par Code_INSEE_r√©gion et Ann√©e (somme en cas de doublons)
        - Trie les r√©sultats par r√©gion et ann√©e
        """

        if df_env is None:
            logger.error("‚ùå Le DataFrame environnemental est vide ou invalide.")
            return None

        logger.info("üöÄ Transformation des donn√©es environnementales en cours...")

        # S√©lection des colonnes n√©cessaires et cast des valeurs
        df_transformed = df_env.select(
            col("Ann√©e").cast("int"),
            col("Code_INSEE_R√©gion"),
            col("Parc_install√©_√©olien_MW").cast("double"),
            col("Parc_install√©_solaire_MW").cast("double"),
        )

        # Remplacement des valeurs nulles par 0.0
        df_transformed = df_transformed.fillna(
            {"Parc_install√©_√©olien_MW": 0.0, "Parc_install√©_solaire_MW": 0.0}
        )

        # Regroupement par r√©gion et ann√©e pour sommer les valeurs en cas de doublons
        df_grouped = df_transformed.groupBy("Code_INSEE_R√©gion", "Ann√©e").agg(
            spark_sum("Parc_install√©_√©olien_MW").alias("Parc_install√©_√©olien_MW"),
            spark_sum("Parc_install√©_solaire_MW").alias("Parc_install√©_solaire_MW"),
        )

        # R√©cup√©ration des r√©gions uniques pr√©sentes dans les donn√©es
        regions = df_grouped.select("Code_INSEE_R√©gion").distinct()

        # Cr√©ation d'un DataFrame contenant l'ann√©e 2000 pour chaque r√©gion avec valeurs √† 0.0
        df_year_2000 = (
            regions.withColumn("Ann√©e", lit(2000))
            .withColumn("Parc_install√©_√©olien_MW", lit(0.0))
            .withColumn("Parc_install√©_solaire_MW", lit(0.0))
        )

        # Ajout des donn√©es de l'ann√©e 2000 au DataFrame principal
        df_final = df_grouped.union(df_year_2000)

        # Tri des donn√©es par r√©gion et ann√©e
        df_final = df_final.orderBy("Code_INSEE_R√©gion", "Ann√©e")

        logger.info("‚úÖ Transformation termin√©e ! Aper√ßu des donn√©es transform√©es :")
        df_final.show(15, truncate=False)

        return df_final

    def transform_pib_outre_mer(self, df_pib, region_codes):
        """
        Transforme les donn√©es PIB outre-mer :
        - Suppression des lignes inutiles
        - Ajout du code r√©gion INSEE √† partir du nom du fichier
        - Tri par R√©gion puis Ann√©e
        """

        if df_pib is None:
            logger.error("‚ùå Le DataFrame PIB est vide ou invalide.")
            return None

        logger.info("üöÄ Transformation des donn√©es PIB outre-mer en cours...")

        # Nettoyage des donn√©es
        df_cleaned = df_pib.filter(
            (~col("Ann√©e").isin(["idBank", "Derni√®re mise √† jour", "P√©riode"]))
            & (col("Ann√©e").rlike("^[0-9]{4}$"))
        ).select(
            col("Ann√©e").cast("int"),
            col("PIB_en_euros_par_habitant").cast("int"),
            col("source_file"),
        )

        # Ajout du code r√©gion INSEE depuis le dictionnaire region_codes
        condition = None
        for file_path, code_region in region_codes.items():
            if condition is None:
                condition = when(col("source_file") == file_path, lit(code_region))
            else:
                condition = condition.when(
                    col("source_file") == file_path, lit(code_region)
                )

        df_final = df_cleaned.withColumn("Code_INSEE_R√©gion", lit(None))
        for file_path, code_region in region_codes.items():
            df_final = df_final.withColumn(
                "Code_INSEE_R√©gion",
                when(col("source_file") == file_path, lit(code_region)).otherwise(
                    col("Code_INSEE_R√©gion")
                ),
            )

        df_final = df_final.drop("source_file")

        # Tri final
        df_final = df_final.orderBy(["Code_INSEE_R√©gion", "Ann√©e"])

        logger.info(
            "‚úÖ Transformation PIB termin√©e ! Aper√ßu des donn√©es transform√©es :"
        )
        df_final.show(10, truncate=False)

        return df_final

    def fill_missing_pib_mayotte(self, df_pib):
        """
        Remplit les valeurs manquantes du PIB de Mayotte par r√©gression lin√©aire.
        """

        logger.info("üöÄ Remplissage des valeurs manquantes PIB Mayotte en cours...")

        df_mayotte = df_pib.filter(col("Code_INSEE_R√©gion") == "06")

        known_data = df_mayotte.filter(col("PIB_en_euros_par_habitant").isNotNull())
        unknown_data = df_mayotte.filter(col("PIB_en_euros_par_habitant").isNull())

        assembler = VectorAssembler(inputCols=["Ann√©e"], outputCol="features")
        train_data = assembler.transform(known_data).select(
            "features", "PIB_en_euros_par_habitant"
        )

        # Mod√®le de r√©gression lin√©aire
        lr = LinearRegression(
            featuresCol="features", labelCol="PIB_en_euros_par_habitant"
        )
        model = lr.fit(train_data)

        # Pr√©dictions sur les donn√©es manquantes
        pred_df = assembler.transform(unknown_data)
        pred_result = model.transform(pred_df).select(
            "Ann√©e",
            col("prediction").cast("int").alias("PIB_en_euros_par_habitant"),
            "Code_INSEE_R√©gion",
        )

        # Combine les donn√©es connues et pr√©dites
        df_mayotte_completed = known_data.select(
            "Ann√©e", "PIB_en_euros_par_habitant", "Code_INSEE_R√©gion"
        ).union(pred_result)

        # Autres r√©gions sans modifications
        df_other_regions = df_pib.filter(col("Code_INSEE_R√©gion") != "06")

        # Union finale
        df_final = df_other_regions.union(df_mayotte_completed).orderBy(
            ["Code_INSEE_R√©gion", "Ann√©e"]
        )

        logger.info("‚úÖ Remplissage PIB Mayotte termin√© :")
        df_final.show(10, truncate=False)

        return df_final

    def combine_all_pib_data(self, df_pib_outremer, df_pib_xlsx, df_pib_2022):
        """
        Combine les donn√©es PIB des diff√©rentes sources en un seul DataFrame.
        """

        logger.info("üöÄ Fusion des donn√©es PIB (Outre-mer, Excel, 2022)...")

        # Harmoniser les colonnes
        df_pib_xlsx = df_pib_xlsx.select(
            "Ann√©e", "PIB_en_euros_par_habitant", "Code_INSEE_R√©gion"
        )
        df_pib_2022 = df_pib_2022.select(
            "Ann√©e", "PIB_en_euros_par_habitant", "Code_INSEE_R√©gion"
        )
        df_pib_outremer = df_pib_outremer.select(
            "Ann√©e", "PIB_en_euros_par_habitant", "Code_INSEE_R√©gion"
        )

        # Liste des r√©gions pr√©sentes en 2022
        regions_2022 = [
            row["Code_INSEE_R√©gion"]
            for row in df_pib_2022.select("Code_INSEE_R√©gion").distinct().collect()
        ]

        # Identifier les r√©gions absentes en 2022
        missing_regions = (
            df_pib_xlsx.select("Code_INSEE_R√©gion")
            .distinct()
            .filter(~col("Code_INSEE_R√©gion").isin(regions_2022))
        )

        # Ajouter des lignes vides pour les r√©gions absentes en 2022
        if missing_regions.count() > 0:
            df_missing_2022 = missing_regions.withColumn("Ann√©e", lit(2022)).withColumn(
                "PIB_en_euros_par_habitant", lit(None).cast("int")
            )
            df_pib_2022 = df_pib_2022.union(df_missing_2022)

        # Fusion des donn√©es
        df_final = df_pib_outremer.union(df_pib_xlsx).union(df_pib_2022)

        # **Filtrer les lignes invalides** (Code r√©gion doit √™tre num√©rique et PIB non NULL)
        df_final = df_final.filter(
            (col("Code_INSEE_R√©gion").rlike("^[0-9]+$"))
            & (col("PIB_en_euros_par_habitant").isNotNull())
        )

        # Filtrer et trier
        df_final = df_final.filter((col("Ann√©e") >= 2000) & (col("Ann√©e") <= 2022))
        df_final = df_final.orderBy(["Code_INSEE_R√©gion", "Ann√©e"])

        logger.info("‚úÖ Fusion des donn√©es PIB r√©ussie :")
        df_final.show(10, truncate=False)

        return df_final

    def transform_inflation_data(self, df_inflation):
        """
        Transforme les donn√©es d'inflation en filtrant les ann√©es et en les triant.

        :param df_inflation: DataFrame PySpark contenant les donn√©es brutes d'inflation.
        :return: DataFrame PySpark nettoy√© et tri√©.
        """
        if df_inflation is None:
            logger.error("‚ùå Le DataFrame inflation est vide ou invalide.")
            return None

        logger.info("üöÄ Transformation des donn√©es d'inflation en cours...")

        # Filtrer et trier les donn√©es
        df_transformed = df_inflation.orderBy("Ann√©e")

        logger.info("‚úÖ Transformation des donn√©es d'inflation r√©ussie :")
        df_transformed.show(10, truncate=False)

        return df_transformed

    def combine_pib_and_inflation(self, df_pib, df_inflation):
        """
        Combine les donn√©es PIB et Inflation, et calcule le ratio PIB_par_inflation avec arrondi √† 2 d√©cimales.

        :param df_pib: DataFrame PySpark contenant le PIB par r√©gion.
        :param df_inflation: DataFrame PySpark contenant l'inflation nationale.
        :return: DataFrame PySpark combin√© avec le calcul du PIB ajust√© par l'inflation.
        """
        if df_pib is None or df_inflation is None:
            logger.error("‚ùå L'un des DataFrames est vide. Impossible de les combiner.")
            return None

        logger.info("üöÄ Fusion des donn√©es PIB et Inflation...")

        # Joindre PIB et Inflation sur la colonne Ann√©e
        df_combined = df_pib.join(df_inflation, "Ann√©e", "left")

        # Utiliser le bon nom de colonne pour l'inflation et arrondir √† 2 d√©cimales
        df_combined = df_combined.withColumn(
            "√âvolution_des_prix_√†_la_consommation",
            round(col("√âvolution_des_prix_√†_la_consommation"), 2),
        )

        df_combined = df_combined.withColumn(
            "PIB_par_inflation",
            round(
                col("PIB_en_euros_par_habitant")
                / (1 + col("√âvolution_des_prix_√†_la_consommation") / 100),
                2,
            ),
        )

        # Trier les r√©sultats
        df_combined = df_combined.orderBy("Code_INSEE_R√©gion", "Ann√©e")

        logger.info("‚úÖ Fusion des donn√©es PIB et Inflation r√©ussie :")
        df_combined.show(10, truncate=False)

        return df_combined

    def transform_technologie_data(self, df):
        """
        Transforme les donn√©es de technologie.

        :param df: DataFrame PySpark brut
        :return: DataFrame PySpark transform√©
        """
        if df is None:
            logger.error("‚ùå Le DataFrame technologie est vide ou invalide.")
            return None

        logger.info("üöÄ Transformation des donn√©es de technologie en cours...")

        try:
            return self._extracted_from_transform_technologie_data_15(df)
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la transformation des donn√©es : {str(e)}")
            return None

    # TODO Rename this here and in `transform_technologie_data`
    def _extracted_from_transform_technologie_data_15(self, df):
        df_transformed = self._select_and_rename_columns(df)
        df_transformed = self._round_percentages(df_transformed)
        df_transformed = self._clean_years(df_transformed)
        df_transformed = self._replace_nan_year(df_transformed)

        logger.info("‚úÖ Transformation des donn√©es de technologie r√©ussie")
        return df_transformed

    def _select_and_rename_columns(self, df):
        """S√©lectionne et renomme les colonnes."""
        return df.select(
            col("_c0").alias("annee").cast("string"),
            col("DIRD/PIB  France")
            .alias("dird_pib_france_pourcentages")
            .cast("float"),
        )

    def _round_percentages(self, df):
        """Arrondit les pourcentages √† 2 d√©cimales."""
        return df.withColumn(
            "dird_pib_france_pourcentages",
            round(col("dird_pib_france_pourcentages"), 2),
        )

    def _clean_years(self, df):
        """Nettoie les ann√©es en supprimant '.0'."""
        return df.withColumn("annee", regexp_replace("annee", "\.0", ""))

    def _replace_nan_year(self, df):
        """Remplace les valeurs 'NaN' dans la colonne 'annee' par '2023'."""
        return df.withColumn(
            "annee", when(col("annee") == "NaN", "2023").otherwise(col("annee"))
        )
        
        
    def transform_election_data_1965_2012(self, list_df):
        """
        Transforme et agr√®ge les fichiers CSV 1965-2012.
        - Unpivot via STACK
        - Agr√©gation par candidat
        - S√©lection du candidat gagnant par d√©partement et ann√©e
        - Nettoyage du nom du candidat
        :param list_df: liste de DataFrames bruts
        :return: DataFrame PySpark final (ann√©e, code_dept, candidat, total_voix)
        """
        if not list_df:
            logger.warning("Liste de DataFrames 1965-2012 vide.")
            return None
        results = []
        # Boucle sur chacun des DF (un par fichier CSV)
        for df in list_df:
            # Colonnes cl√©s (√† ne pas unpivoter)
            key_columns = {
                "Code d√©partement",
                "Code d√©partement0",
                "Code d√©partement1",
                "d√©partement",
                "circonscription",
                "Inscrits",
                "Votants",
                "Exprim√©s",
                "Blancs et nuls",
                "filename",
                "annee",
            }

            # D√©termine la bonne colonne de d√©partement
            if "Code d√©partement" in df.columns:
                dept_col = "Code d√©partement"
            elif "Code d√©partement0" in df.columns:
                dept_col = "Code d√©partement0"
            else:
                # Pas de colonne attendue
                continue

            # Colonnes candidats
            candidate_columns = [c for c in df.columns if c not in key_columns]
            n = len(candidate_columns)
            if n == 0:
                continue

            # Expression stack pour unpivot
            expr_parts = []
            for c in candidate_columns:
                escaped_col = c.replace("'", "''")
                expr_parts.append(f"'{escaped_col}', cast(`{c}` as int)")
            expr = f"stack({n}, {', '.join(expr_parts)}) as (candidat, voix)"

            # Unpivot
            df_unpivot = df.select(
                "annee", F.col(dept_col).alias("code_dept"), F.expr(expr)
            )

            # Agr√©gation par d√©partement / candidat / ann√©e
            df_agg = df_unpivot.groupBy("annee", "code_dept", "candidat").agg(
                F.sum("voix").alias("total_voix")
            )

            # S√©lection du gagnant par dept + ann√©e
            windowSpec = Window.partitionBy("annee", "code_dept").orderBy(
                F.desc("total_voix")
            )
            df_winner = df_agg.withColumn(
                "rank", F.row_number().over(windowSpec)
            ).filter(F.col("rank") == 1)

            # Nettoyage du nom du candidat
            df_winner = df_winner.withColumn("gagnant", F.col("candidat"))
            df_winner = df_winner.withColumn(
                "gagnant", F.trim(F.regexp_replace(F.col("gagnant"), r"\([^)]*\)", ""))
            )
            df_winner = df_winner.withColumn(
                "gagnant",
                when(F.col("gagnant") == "SARKOZY", "Nicolas SARKOZY")
                .when(F.col("gagnant") == "CHIRAC", "Jacques CHIRAC")
                .when(F.col("gagnant") == "MITTERRAND", "Fran√ßois MITTERRAND")
                .when(F.col("gagnant") == "DE GAULLE", "Charles DE GAULLE")
                .when(F.col("gagnant") == "GISCARD DESTAING", "Val√©ry GISCARD DESTAING")
                .when(F.col("gagnant") == "POMPIDOU", "Georges POMPIDOU")
                .when(F.col("gagnant") == "POHER", "Alain POHER")
                .when(F.col("gagnant") == "JOSPIN", "Lionel JOSPIN")
                .when(F.col("gagnant") == "ROYAL", "S√©gol√®ne ROYAL")
                .when(F.col("gagnant") == "HOLLANDE", "Fran√ßois HOLLANDE")
                .when(F.col("gagnant") == "MACRON", "Emmanuel MACRON")
                .when(F.col("gagnant") == "LE PEN", "Marine LE PEN")
                .otherwise(F.col("gagnant")),
            )

            # S√©lection colonnes finales
            results.append(
                df_winner.select(
                    "annee",
                    "code_dept",
                    F.col("gagnant").alias("candidat"),
                    "total_voix",
                )
            )

        # Union de tous les r√©sultats
        if results:
            final_df = results[0]
            for df_r in results[1:]:
                final_df = final_df.union(df_r)

            # Normalisation du code_dept (ex: passer '1' -> '01')
            final_df = (
                final_df.withColumn(
                    "code_dept_norm",
                    F.when(
                        F.col("code_dept").rlike("^[0-9]$"),
                        F.lpad(F.col("code_dept"), 2, "0"),
                    ).otherwise(F.col("code_dept")),
                )
                .drop("code_dept")
                .withColumnRenamed("code_dept_norm", "code_dept")
            )

            return final_df

        else:
            logger.warning("Aucune donn√©e agr√©g√©e pour 1965-2012.")
            return None

    def transform_election_data_2017(self, df_2017_raw):
        """
        Transforme le fichier Excel 2017 :
        - S√©lection du candidat gagnant par d√©partement
        - Nettoyage (codes sp√©ciaux pour r√©gions d outre-mer)
        """
        if df_2017_raw is None:
            logger.warning("DataFrame 2017 vide.")
            return None

        df_2017 = (
            df_2017_raw.withColumnRenamed("Code du d√©partement", "code_dept")
            .withColumn(
                "candidat1", F.concat(F.col("Nom17"), F.lit(" "), F.col("Pr√©nom18"))
            )
            .withColumn(
                "candidat2", F.concat(F.col("Nom23"), F.lit(" "), F.col("Pr√©nom24"))
            )
            .select(
                F.col("code_dept").cast("string"),
                F.col("Libell√© du d√©partement"),
                F.col("Voix19").alias("voix1").cast("int"),
                F.col("Voix25").alias("voix2").cast("int"),
                "candidat1",
                "candidat2",
            )
        )

        # On cr√©e un DataFrame par candidat
        df_2017_candidate1 = df_2017.select(
            "code_dept",
            F.col("candidat1").alias("candidat"),
            F.col("voix1").alias("voix"),
            F.col("Libell√© du d√©partement"),
        )

        df_2017_candidate2 = df_2017.select(
            "code_dept",
            F.col("candidat2").alias("candidat"),
            F.col("voix2").alias("voix"),
            F.col("Libell√© du d√©partement"),
        )

        # Union des deux candidats
        df_2017_norm = df_2017_candidate1.union(df_2017_candidate2).withColumn(
            "annee", F.lit("2017")
        )

        # 1. Appliquer le mapping pour les codes sp√©ciaux et la Corse
        df_2017_norm = df_2017_norm.withColumn(
            "code_dept_norm",
            F.when(F.col("Libell√© du d√©partement") == "Guadeloupe", "ZA")
            .when(F.col("Libell√© du d√©partement") == "Martinique", "ZB")
            .when(F.col("Libell√© du d√©partement") == "Guyane", "ZC")
            .when(F.col("Libell√© du d√©partement") == "La R√©union", "ZD")
            .when(F.col("Libell√© du d√©partement") == "Mayotte", "ZM")
            .when(F.col("Libell√© du d√©partement") == "Nouvelle-Cal√©donie", "ZN")
            .when(F.col("Libell√© du d√©partement") == "Polyn√©sie fran√ßaise", "ZP")
            .when(F.col("Libell√© du d√©partement") == "Saint-Pierre-et-Miquelon", "ZS")
            .when(
                F.col("Libell√© du d√©partement") == "Saint-Martin/Saint-Barth√©lemy", "ZX"
            )
            .when(F.col("Libell√© du d√©partement") == "Wallis et Futuna", "ZW")
            .when(
                F.col("Libell√© du d√©partement") == "Fran√ßais √©tablis hors de France",
                "ZZ",
            )
            .when(F.col("Libell√© du d√©partement") == "Corse-du-Sud", "2A")
            .when(F.col("Libell√© du d√©partement") == "Haute-Corse", "2B")
            .otherwise(F.col("code_dept")),
        )

        # 1. Supprimer la terminaison ".0" dans la colonne "code_dept_norm"
        df_final_2017 = df_2017_norm.withColumn(
            "code_dept_final", F.regexp_replace(F.col("code_dept_norm"), r"\.0$", "")
        )

        # 2. (Optionnel) Si vous souhaitez que les codes sur un seul chiffre soient affich√©s sur 2 chiffres (ex. "1" -> "01")
        df_final_2017 = df_final_2017.withColumn(
            "code_dept_final",
            F.when(
                F.col("code_dept_final").rlike("^[0-9]$"),
                F.lpad(F.col("code_dept_final"), 2, "0"),
            ).otherwise(F.col("code_dept_final")),
        )

        # 3. Supprimer les colonnes interm√©diaires et renommer la colonne finale en "code_dept"
        df_final_2017 = df_final_2017.drop(
            "code_dept", "code_dept_norm", "Libell√© du d√©partement"
        ).withColumnRenamed("code_dept_final", "code_dept")

        # Pour chaque d√©partement, on garde le candidat avec le maximum de voix
        w_dept = Window.partitionBy("annee", "code_dept").orderBy(F.desc("voix"))
        df_2017_final = (
            df_final_2017.withColumn("rank", F.row_number().over(w_dept))
            .filter(F.col("rank") == 1)
            .select("annee", "code_dept", "candidat", "voix")
        )

        return df_2017_final

    def transform_election_data_2022(self, df_2022_raw):
        """
        Transforme le fichier Excel 2022 :
        - S√©lection du gagnant par d√©partement
        - Normalisation du nom du candidat (Emmanuel MACRON, Marine LE PEN, etc.)
        """
        if df_2022_raw is None:
            logger.warning("DataFrame 2022 vide.")
            return None

        # Pour 2022, on suppose que chaque ligne correspond d√©j√† √† un candidat,
        # avec "Code du d√©partement", "Nom", "Pr√©nom" et "Voix".
        df_2022 = (
            df_2022_raw.withColumnRenamed("Code du d√©partement", "code_dept")
            .withColumn("candidat", F.concat(F.col("Nom"), F.lit(" "), F.col("Pr√©nom")))
            .select(
                F.col("code_dept").cast("string"),
                "candidat",
                F.col("Voix").alias("voix"),
            )
            .withColumn("annee", F.lit("2022"))
        )

        # On agr√®ge par d√©partement pour s√©lectionner le candidat gagnant (le plus de voix)
        w_dept_2022 = Window.partitionBy("annee", "code_dept").orderBy(F.desc("voix"))
        df_2022_final = (
            df_2022.withColumn("rank", F.row_number().over(w_dept_2022))
            .filter(F.col("rank") == 1)
            .select("annee", "code_dept", "candidat", "voix")
        )

        return df_2022_final

    def combine_all_years(self, df_1965_2012, df_2017, df_2022):
        """
        Combine les DataFrames de 1965-2012, 2017 et 2022.
        Applique les mappings DOM-TOM (ZA->971 etc.) et renomme la colonne 'voix' en 'total_voix'.
        """
        if df_1965_2012 is None and df_2017 is None and df_2022 is None:
            logger.warning("Aucun DataFrame √† combiner.")
            return None

        # Union 2017 et 2022
        df_final = df_2017.union(df_2022)

        # 1. Appliquer le mapping pour les codes sp√©ciaux
        df_final = df_final.withColumn(
            "code_dept",
            F.when(F.col("code_dept") == "ZA", "971")
            .when(F.col("code_dept") == "ZB", "972")
            .when(F.col("code_dept") == "ZC", "973")
            .when(F.col("code_dept") == "ZD", "974")
            .when(F.col("code_dept") == "ZM", "976")
            .when(F.col("code_dept") == "ZN", "988")
            .when(F.col("code_dept") == "ZP", "987")
            .when(F.col("code_dept") == "ZS", "975")
            .when(F.col("code_dept") == "ZX", "971")
            .when(F.col("code_dept") == "ZW", "986")
            .when(F.col("code_dept") == "ZZ", "99")
            .otherwise(F.col("code_dept")),
        )

        # 1.1 Normalisation des candidats avec pr√©nom et nom
        df_final = df_final.withColumn(
            "candidat",
            F.when(F.col("candidat") == "MACRON Emmanuel", "Emmanuel MACRON").when(
                F.col("candidat") == "LE PEN Marine", "Marine LE PEN"
            ),
        )

        # 2. Appliquer le format int pour les voix
        df_final = df_final.withColumn("voix", F.col("voix").cast("int"))

        # 3. Renommer la colonne "voix" en "total_voix"
        df_final = df_final.withColumnRenamed("voix", "total_voix")

        # 4. S√©lection des colonnes d'int√©r√™t
        df_1965_2012 = df_1965_2012.select(
            "annee", "code_dept", "candidat", "total_voix"
        )

        # 5. Union des deux DataFrames
        df_final_csv = df_final.union(df_1965_2012)

        # Tri final
        df_final_csv = df_final_csv.orderBy("annee", "code_dept")

        return df_final_csv
    
    def transform_life_expectancy_data(self, df_life, df_departments):
        """
        Transforme les donn√©es d'esp√©rance de vie √† la naissance pour hommes et femmes :
        - Filtre les lignes dont le libell√© commence par "Esp√©rance de vie √† la naissance - Hommes" ou "Esp√©rance de vie √† la naissance - Femmes"
        - Extrait le genre et le d√©partement depuis le libell√©
        - Ne garde que les colonnes pour les ann√©es 2000 √† 2022
        - Convertit le format large en format long via STACK
        - Effectue un pivot pour obtenir une ligne par d√©partement et par ann√©e avec deux colonnes pour l'esp√©rance de vie
        (Esp√©rance_Vie_Homme et Esp√©rance_Vie_Femme)
        - Filtre pour ne conserver que les lignes dont le "D√©partement" correspond √† un d√©partement r√©el (et non une r√©gion)
        - Joint avec le DataFrame des d√©partements pour r√©cup√©rer le code de d√©partement r√©el (CODE_DEP)
        :param df_life: DataFrame PySpark contenant les donn√©es brutes d'esp√©rance de vie
        :param df_departments: DataFrame PySpark contenant les d√©partements (colonnes : code_departement, nom_departement, etc.)
        :return: DataFrame final avec colonnes CODE_DEP, Ann√©e, Esp√©rance_Vie_Homme, Esp√©rance_Vie_Femme
        """
        if df_life is None:
            logger.error("‚ùå Le DataFrame d'esp√©rance de vie est vide ou invalide.")
            return None

        logger.info("üöÄ Transformation des donn√©es d'esp√©rance de vie en cours...")

        # Filtrer les lignes d'int√©r√™t
        df_filtered = df_life.filter(
            (col("Libell√©").rlike("^Esp√©rance de vie √† la naissance - Hommes")) |
            (col("Libell√©").rlike("^Esp√©rance de vie √† la naissance - Femmes"))
        )

        # Extraire le genre et le "nom de d√©partement ou r√©gion" depuis le libell√©
        df_filtered = df_filtered.withColumn(
            "Genre",
            regexp_extract(col("Libell√©"), r"Esp√©rance de vie √† la naissance - (Hommes|Femmes) - (.*)", 1)
        ).withColumn(
            "D√©partement",
            trim(regexp_extract(col("Libell√©"), r"Esp√©rance de vie √† la naissance - (Hommes|Femmes) - (.*)", 2))
        )

        # S√©lectionner les colonnes des ann√©es de 2000 √† 2022
        years = [str(year) for year in range(2000, 2023)]
        selected_cols = ["Libell√©", "Genre", "D√©partement"] + years
        df_selected = df_filtered.select(*selected_cols)

        # Conversion du format large en format long via STACK
        n_years = len(years)
        stack_expr = "stack({0}, {1}) as (Annee, Esperance_de_vie)".format(
            n_years,
            ", ".join([f"'{year}', `{year}`" for year in years])
        )
        df_long = df_selected.select("Genre", "D√©partement", expr(stack_expr))
        df_long = df_long.withColumn("Annee", col("Annee").cast(IntegerType())) \
                        .withColumn("Esperance_de_vie", col("Esperance_de_vie").cast(DoubleType()))
        df_long = df_long.filter(col("Annee").between(2000, 2022))

        # Pivot pour cr√©er des colonnes pour Hommes et Femmes
        df_pivot = df_long.groupBy("D√©partement", "Annee").pivot("Genre", ["Hommes", "Femmes"]) \
                        .agg(F.first("Esperance_de_vie"))

        # Fonction de normalisation des noms
        def normalize_dept(column):
            norm = F.lower(trim(column))
            # Remplacer les accents
            norm = F.translate(norm, "√©√®√™√´√†√¢√§√Æ√Ø√¥√∂√π√ª√º√ß", "eeeeaaaiioouuuc")
            # Supprimer tirets, apostrophes et espaces
            norm = F.regexp_replace(norm, "[-' ]", "")
            return norm

        # Appliquer la normalisation sur le DataFrame pivot√©
        df_pivot = df_pivot.withColumn("D√©partement_norm", normalize_dept(col("D√©partement")))
        # Appliquer la m√™me normalisation sur le DataFrame des d√©partements
        df_depts_norm = df_departments.withColumn("nom_departement_norm", normalize_dept(col("nom_departement")))

        # --- Filtrage pour ne conserver que les d√©partements r√©els ---
        # Collecter la liste des noms normalis√©s de d√©partements √† partir du CSV
        valid_dept_names = [row["nom_departement_norm"] for row in df_depts_norm.select("nom_departement_norm").distinct().collect()]
        logger.info("Liste des d√©partements valides (normalis√©s) : " + ", ".join(valid_dept_names))
        # Filtrer les lignes dont le D√©partement_norm figure dans cette liste
        df_pivot = df_pivot.filter(col("D√©partement_norm").isin(valid_dept_names))
        # --- Fin du filtrage ---

        # Jointure pour associer le code de d√©partement r√©el
        df_joined = df_pivot.join(
            df_depts_norm,
            df_pivot["D√©partement_norm"] == df_depts_norm["nom_departement_norm"],
            "left"
        )

        df_final = df_joined.select(
            df_depts_norm["code_departement"].alias("CODE_DEP"),
            col("Annee").alias("Ann√©e"),
            col("Hommes").alias("Esp√©rance_Vie_Homme"),
            col("Femmes").alias("Esp√©rance_Vie_Femme")
        ).orderBy("CODE_DEP", "Ann√©e")

        logger.info("‚úÖ Transformation termin√©e ! Aper√ßu :")
        df_final.show(10, truncate=False)

        # Affichage de d√©bogage : lister les lignes non associ√©es (si besoin)
        df_unmatched = df_joined.filter(df_depts_norm["code_departement"].isNull())
        logger.info("Lignes non associ√©es apr√®s jointure :")
        df_unmatched.select("D√©partement", "D√©partement_norm").distinct().show(truncate=False)

        return df_final
    

    def fill_missing_mayotte_life_expectancy(self, df_final):
        """
        Compl√®te les valeurs manquantes pour Mayotte (CODE_DEP = "976")
        dans le DataFrame final en utilisant une r√©gression lin√©aire sur l'ann√©e.
        On entra√Æne deux mod√®les (un pour les hommes et un pour les femmes) sur les donn√©es connues,
        puis on pr√©dit pour les ann√©es manquantes (ici, par exemple pour 2000-2013).

        :param df_final: DataFrame final avec colonnes CODE_DEP, Ann√©e, Esp√©rance_Vie_Homme, Esp√©rance_Vie_Femme
        :return: DataFrame final avec les valeurs manquantes pour Mayotte compl√©t√©es et arrondies √† 2 d√©cimales
        """


        # Filtrer uniquement les donn√©es de Mayotte
        df_mayotte = df_final.filter(col("CODE_DEP") == "976")
        
        # Pour les hommes
        known_men = df_mayotte.filter(col("Esp√©rance_Vie_Homme").isNotNull())
        unknown_men = df_mayotte.filter(col("Esp√©rance_Vie_Homme").isNull())
        
        assembler = VectorAssembler(inputCols=["Ann√©e"], outputCol="features")
        train_men = assembler.transform(known_men).select("Ann√©e", "features", "Esp√©rance_Vie_Homme")
        
        lr_men = LinearRegression(featuresCol="features", labelCol="Esp√©rance_Vie_Homme")
        model_men = lr_men.fit(train_men)
        
        pred_men = assembler.transform(unknown_men)
        pred_men = model_men.transform(pred_men).select("Ann√©e", col("prediction").alias("pred_men"))
        
        # Pour les femmes
        known_women = df_mayotte.filter(col("Esp√©rance_Vie_Femme").isNotNull())
        unknown_women = df_mayotte.filter(col("Esp√©rance_Vie_Femme").isNull())
        
        train_women = assembler.transform(known_women).select("Ann√©e", "features", "Esp√©rance_Vie_Femme")
        lr_women = LinearRegression(featuresCol="features", labelCol="Esp√©rance_Vie_Femme")
        model_women = lr_women.fit(train_women)
        
        pred_women = assembler.transform(unknown_women)
        pred_women = model_women.transform(pred_women).select("Ann√©e", col("prediction").alias("pred_women"))
        
        # Joindre les pr√©dictions sur "Ann√©e"
        pred_combined = pred_men.join(pred_women, on="Ann√©e", how="inner")
        
        # Remplacer les valeurs manquantes par les pr√©dictions en arrondissant √† 2 d√©cimales
        df_mayotte_filled = df_mayotte.alias("base").join(
            pred_combined.alias("pred"),
            on="Ann√©e",
            how="left"
        ).withColumn(
            "Esp√©rance_Vie_Homme_new",
            when(col("base.Esp√©rance_Vie_Homme").isNull(), round(col("pred.pred_men"), 1))
            .otherwise(round(col("base.Esp√©rance_Vie_Homme"), 1))
        ).withColumn(
            "Esp√©rance_Vie_Femme_new",
            when(col("base.Esp√©rance_Vie_Femme").isNull(), round(col("pred.pred_women"), 1))
            .otherwise(round(col("base.Esp√©rance_Vie_Femme"), 1))
        ).select(
            col("base.CODE_DEP").alias("CODE_DEP"),
            col("base.Ann√©e").alias("Ann√©e"),
            col("Esp√©rance_Vie_Homme_new").alias("Esp√©rance_Vie_Homme"),
            col("Esp√©rance_Vie_Femme_new").alias("Esp√©rance_Vie_Femme")
        )
        
        # Conserver les donn√©es pour les autres d√©partements
        df_other = df_final.filter(col("CODE_DEP") != "976")
        
        # Fusionner et trier le DataFrame final
        df_filled = df_other.unionByName(df_mayotte_filled).orderBy("CODE_DEP", "Ann√©e")
        
        return df_filled
    
    def transform_education_data(self, df):
        """
        Transforme et nettoie les donn√©es d'√©ducation issues du CSV 'fr-en-etablissements-fermes.csv'.
        √âtapes de transformation :
          1. Suppression des doublons.
          2. Standardisation de toutes les colonnes textuelles (conversion en minuscules, suppression des espaces,
             remplacement des valeurs nulles par "non sp√©cifi√©").
          3. Conversion de la colonne "date_fermeture" en type Date et extraction de l'ann√©e dans "annee_fermeture".
          4. Normalisation du code postal : remplacement des valeurs nulles par "00000", puis suppression des espaces.
          5. S√©paration des secteurs public et priv√© √† partir de la colonne "secteur_public_prive_libe".
        :param df: DataFrame Spark brut issu du fichier CSV d‚Äô√©ducation.
        :return: DataFrame nettoy√© et transform√©.
        """

        logger.info("üöÄ Transformation des donn√©es d'√©ducation en cours...")

        # 1. Suppression des doublons
        df = df.dropDuplicates()

        # 2. Standardisation des colonnes textuelles
        for column in df.columns:
            df = df.withColumn(
                column,
                F.when(F.col(column).isNotNull(), F.trim(F.lower(F.col(column))))
                .otherwise(F.lit("non sp√©cifi√©"))
            )

        # 3. Conversion de 'date_fermeture' en DateType et extraction de l'ann√©e
        if "date_fermeture" in df.columns:
            df = df.withColumn("date_fermeture", F.col("date_fermeture").cast(DateType()))
            df = df.withColumn("annee_fermeture", F.year(F.col("date_fermeture")))

        # 4. Normalisation du code postal
        if "code_postal" in df.columns:
            df = df.withColumn(
                "code_postal",
                F.when(F.col("code_postal").isNull(), F.lit("00000"))
                .otherwise(F.trim(F.col("code_postal")))
            )

        # 5. S√©paration du secteur public/priv√©
        if "secteur_public_prive_libe" in df.columns:
            df = df.withColumn(
                "secteur_public",
                F.when(F.col("secteur_public_prive_libe") == "public", 1).otherwise(0)
            )
            df = df.withColumn(
                "secteur_prive",
                F.when(F.col("secteur_public_prive_libe") == "priv√©", 1).otherwise(0)
            )

        logger.info("‚úÖ Transformation des donn√©es d'√©ducation r√©ussie.")
        df.show(5, truncate=False)
        return df

    def calculate_closed_by_year_and_dept_education(self, df):
        """
        Calcule le nombre d'√©tablissements ferm√©s par ann√©e et par d√©partement √† partir des donn√©es d‚Äô√©ducation.
        Regroupe par 'annee_fermeture', 'code_departement' et 'libelle_departement', puis agr√®ge :
          - Le nombre total d'√©tablissements (count sur "numero_uai"),
          - Le nombre d'√©tablissements ferm√©s dans le secteur public (sum de "secteur_public"),
          - Le nombre dans le secteur priv√© (sum de "secteur_prive"),
          - Les pourcentages correspondants (arrondis √† 2 d√©cimales).
        :param df: DataFrame nettoy√© d'√©ducation, incluant les colonnes "annee_fermeture", "code_departement",
                   "libelle_departement", "numero_uai", "secteur_public" et "secteur_prive".
        :return: DataFrame avec les statistiques par ann√©e et d√©partement.
        """


        logger.info("üöÄ Calcul des statistiques de fermetures d'√©tablissements par d√©partement et ann√©e...")

        df_grouped = df.groupBy("annee_fermeture", "code_departement", "libelle_departement") \
            .agg(
                F.count("numero_uai").alias("nombre_total_etablissements"),
                F.sum("secteur_public").alias("nb_public"),
                F.sum("secteur_prive").alias("nb_prive"),
                F.round((F.sum("secteur_public") * 100.0 / F.count("*")), 2).alias("pct_public"),
                F.round((F.sum("secteur_prive") * 100.0 / F.count("*")), 2).alias("pct_prive")
            ) \
            .orderBy("annee_fermeture", "code_departement")

        logger.info("‚úÖ Calcul termin√©. Aper√ßu des statistiques :")
        df_grouped.show(10, truncate=False)
        return df_grouped
    
    def separate_demographic_totals(self, df):
        """
        S√©pare les lignes de totaux (France m√©tropolitaine, DOM, France m√©tropolitaine et DOM)
        du reste (lignes d√©partementales).
        """
        from pyspark.sql.functions import col

        # Filtre les lignes o√π 'Code_D√©partement' contient "France" ou "DOM"
        df_totaux = df.filter(
            (col("Code_D√©partement").contains("France")) | 
            (col("Code_D√©partement").contains("DOM")) |
            (col("Code_D√©partement").contains("Source"))  # Au besoin, pour exclure la ligne "Source : ..."
        )
        # Tout le reste est consid√©r√© comme d√©partements
        df_departements = df.subtract(df_totaux)

        # On peut √©ventuellement trier
        df_totaux = df_totaux.orderBy(col("Ann√©e").desc())
        df_departements = df_departements.orderBy(col("Ann√©e").desc())

        return df_totaux, df_departements










