import logging
from pyspark.sql.functions import col, when, lit, isnan

# Configuration du logger
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


class DataTransformer:
    """
    Classe permettant de transformer les donn√©es extraites avant leur chargement.
    """

    def __init__(self):
        pass

    def transform_environmental_data(self, df_env):
        """
        Transforme les donn√©es environnementales :
         - S√©lectionne uniquement les colonnes n√©cessaires
         - Remplace les valeurs vides par NULL dans les colonnes "Parc install√© √©olien (MW)" et "Parc install√© solaire (MW)"
         - Ajoute deux colonnes indicatrices "eolien_missing" et "solaire_missing" pour identifier les valeurs manquantes.
        """

        if df_env is None:
            logger.error("‚ùå Le DataFrame environnemental est vide ou invalide.")
            return None

        logger.info("üöÄ Transformation des donn√©es environnementales en cours...")

        # S√©lection des colonnes n√©cessaires
        df_transformed = df_env.select(
            col("Ann√©e"),
            col("Code_INSEE_r√©gion"),
            col("Parc_install√©_√©olien_MW"),
            col("Parc_install√©_solaire_MW"),
        )

        # Remplacement des valeurs vides par 0
        df_transformed = df_transformed.withColumn(
            "Parc_install√©_√©olien_MW",
            when(
                (col("Parc_install√©_√©olien_MW").isNull())
                | (isnan(col("Parc_install√©_√©olien_MW"))),
                lit(0),
            ).otherwise(col("Parc_install√©_√©olien_MW").cast("double")),
        )

        df_transformed = df_transformed.withColumn(
            "Parc_install√©_solaire_MW",
            when(
                (col("Parc_install√©_solaire_MW").isNull())
                | (isnan(col("Parc_install√©_solaire_MW"))),
                lit(0),
            ).otherwise(col("Parc_install√©_solaire_MW").cast("double")),
        )

        logger.info("‚úÖ Transformation termin√©e ! Aper√ßu des donn√©es transform√©es :")
        df_transformed.show(15, truncate=False)

        return df_transformed
